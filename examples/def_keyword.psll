// This code:
(def f (set a 10))
(set a 0)
(f) // Invoke by 
(out "a: " a)

// Becomes this:
// ()
// (set a 0)
// (set a 10)
// (out "a: " a)


// This code:
(def my_setter (set a))
// 'my_setter' must be a string, not a pyramid, therefore no dynamically named functions. This *would* work iff 'def' was a pyramid scheme keyword evaluating the left pyramid. Psll will throw an error though.
(my_setter 10)
(out "a: " a)

// Becomes this:
(set a 10)
(out "a: " a)

//==========
// THOUGHTS
//==========

// If set to a list, expand one bracket
(def my_setter (set a))
(my_setter 10)
(set a 10)

// If set to a string, don't
(def my_setter set)
(my_setter a 10)
(set a 10)

// Add compiler option to understand the -def keyword or not

// Throw error because must be a list
(def (...) (set a))

// Don't consume the partent bracket
(def my_function (set a))
() // <- Becomes this, not empty space